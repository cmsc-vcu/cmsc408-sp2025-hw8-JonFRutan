---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-JonFRutan/tree/main>


# Problem Background  
In this assignment we will be working with real world data pulled from the World Bank Database.  
Note that the columns and tables need to be specified with backticks ` and are case sensitive.  

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?  
BEFORE YOU TURN IT IN, replace these back with run_sql_and_return_html

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Short Name` from world_bank_data.wdi_country
where Region is null
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists sp25_rutanj_user.wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
CREATE TABLE sp25_rutanj_user.wdi_country AS
select * from world_bank_data.wdi_country
WHERE Region is not null
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) from sp25_rutanj_user.wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) from sp25_rutanj_user.wdi_country
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct Region from wdi_country where Region is not null group by Region order by Region
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select Region, count(*) as `Count` from sp25_rutanj_user.wdi_country group by Region order by Count desc
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Short Name`, `Long Name`, Region from wdi_country where Region = "North America"
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select `Short Name`, `Long Name`, Region FROM wdi_country WHERE `Short Name` = "Qatar"
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT `Country Code`, `Short name`, `Long name`, `2-alpha code`, `WB-2 code` from wdi_country WHERE `2-alpha code` <> `WB-2 code`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select `Income Group`, count(*) as Count
from wdi_country
group by `Income Group`
order by Count desc
""")

```

## Task 12
The issue here is that Venezuela is not assigned to an income group, although it should be assigned to "high income".
```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
select `Short Name`, Region, `Income Group` from wdi_country
 where `Income Group` is null and Region is not null
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
Update sp25_rutanj_user.wdi_country set `Income Group` = 'High income' where `Short Name` = "Venezuela";
commit;
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
select `Long Name`, `Short Name`, `Income Group` from sp25_rutanj_user.wdi_country where `Short Name` = "Venezuela"
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select Region, `Income Group`, count(*) as CountryCount
from sp25_rutanj_user.wdi_country
group by Region, `Income Group`
order by Region, `Income Group`
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
select 
  Region,
  sum(case when `Income Group` = 'High income' then 1 else 0 end) as High,
  sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end) as `Upper Middle`,
  sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end) as `Lower Middle`,
  sum(case when `Income Group` = 'Low income' then 1 else 0 end) as Low,
  sum(case when `Income Group` is null then 1 else 0 end) as Unknown,
  sum(1) as Total
from 
  sp25_rutanj_user.wdi_country
group by 
  Region
order by 
  Region
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select count(*) as CountryCount, Region, `Income Group` from wdi_country where `Income Group` = "Low income" group by Region, `Income Group` order by CountryCount desc
limit 1
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, Region, `Income Group` from wdi_country
where Region = (select Region from wdi_country where `Country Code` = 'MHL')
and `Income Group` = (select `Income Group` from wdi_country where `Country Code` = 'MHL')
order by `Short Name`
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with pairings as (select r.Region, i.`Income Group` from (select distinct Region from sp25_rutanj_user.wdi_country where Region is not null) r cross join (select distinct `Income Group` from sp25_rutanj_user.wdi_country where `Income Group` is not null) i),
existing_pairs as (select Region, `Income Group` from sp25_rutanj_user.wdi_country group by Region, `Income Group`)
select pairings.Region, pairings.`Income Group` from pairings, 0 as CountryCount left join existing_pairs
on pairings.Region = existing_pairs.Region
and pairings.`Income Group` = existing_pairs.`Income Group` where existing_pairs.Region is null
order by pairings.Region, pairings.`Income Group`
""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
with counts as (
select Region, `Income Group`, count(*) as CountryCount from sp25_rutanj_user.wdi_country
where Region is not null and `Income Group` is not null
group by Region, `Income Group`),
region_totals as (
select Region, count(*) as region_total from sp25_rutanj_user.wdi_country
where Region is not null and `Income Group` is not null
group by Region),
income_totals as (
select `Income Group`, count(*) as income_total from sp25_rutanj_user.wdi_country
where Region is not null and `Income Group` is not null
group by `Income Group`),
totals as (
select count(*) as total from sp25_rutanj_user.wdi_country
where Region is not null and `Income Group` is not null)
select c.region, c.`Income Group`, c.CountryCount, r.region_total, i.income_total, t.total, round((c.CountryCount/t.total) * 100, 2) as PercentageTotal
from counts c
join region_totals r on c.Region = r.Region
join income_totals i on c.`Income Group` = i.`Income Group`
cross join
totals t
order by PercentageTotal desc
""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
with total as (
  select count(*) as total 
  from sp25_rutanj_user.wdi_country
  where Region is not null and `Income Group` is not null
)
select 
  Region,
  round(sum(case when `Income Group` = 'High income' then 1 else 0 end) * 100.0 / max(total.total), 2) as High,
  round(sum(case when `Income Group` = 'Upper middle income' then 1 else 0 end) * 100.0 / max(total.total), 2) as `Upper Middle`,
  round(sum(case when `Income Group` = 'Lower middle income' then 1 else 0 end) * 100.0 / max(total.total), 2) as `Lower Middle`,
  round(sum(case when `Income Group` = 'Low income' then 1 else 0 end) * 100.0 / max(total.total), 2) as Low,
  round(sum(case when `Income Group` is null then 1 else 0 end) * 100.0 / max(total.total), 2) as Unknown,
  round(count(*) * 100.0 / max(total.total), 2) as Total
from 
  sp25_rutanj_user.wdi_country
cross join 
  total
group by 
  Region
order by 
  Region
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
with total as (
select count(*) as total
from sp25_rutanj_user.wdi_country where Region is not null and `Income Group` is not null)
select `Income Group`, count(*) as count, (select total from total) as total, round(count(*)*100.0/(select total from total), 1) as percentage from sp25_rutanj_user.wdi_country
where Region is not null and `Income Group` is not null
group by `Income Group` order by percentage desc
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

The simple CRUD operations I am quite confident in, while not impressive to brag about I think my general understanding of those is fair. When we begin nesting and doing subqueries though it both takes me a while to understand the problem, and I tend to get lost in the middle of the long, ardous queries. For practice it would be nice to have some database that I had a better feeling of, perhaps working with one I've designed would make understanding how each piece of the tables are meant to interconnect and make these long queries easier to interpret.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

Some of these tasks were very difficult- looking at 18, 19, and 20 in particular. The SQL queries for this gets rather complex and deep- but of course very strongly structured and built to work over and over again. Admittedly AI is the easiest way now for me to approach a problem that has left me stumped, and I would be remiss not to mention it as a great help when trying to solve these. In the future I believe it would be quicker, and incur less technical debt if I were to properly learn from what the AI provided and be able to apply it in real world settings.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

SQL is very simple in concept and application, and this allows for very powerful queries and data to be derived from databases. It's quite overwhelming how powerful you can make these statements by nesting them and combining them with one another. Of course in a real-world setting being able to think in SQL will allow for some very useful data analytics that are sure to impress any employer.


# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

